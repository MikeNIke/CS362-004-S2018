***** RANDOM TEST *****
Function: stewardCard()
***********************

***** RESULTS *****
PASSED TESTS: 10000
FAILED TESTS: 0
***** PASSED RANDOM TEST *****

****** COVERAGE ******
File 'randomtestcard2.c'
Lines executed:74.67% of 75
Creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:13.30% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   102392:    8:int compare(const void* a, const void* b) {
   102392:    9:  if (*(int*)a > *(int*)b)
    52362:   10:    return 1;
    50030:   11:  if (*(int*)a < *(int*)b)
    50030:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
       70:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       70:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       70:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       70:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15002:  214:  while (state->deckCount[player] > 0) {
    14862:  215:    card = floor(Random() * state->deckCount[player]);
    14862:  216:    newDeck[newDeckPos] = state->deck[player][card];
    14862:  217:    newDeckPos++;
  1200071:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  1185209:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    14862:  221:    state->deckCount[player]--;
        -:  222:  }
    14932:  223:  for (i = 0; i < newDeckPos; i++) {
    14862:  224:    state->deck[player][i] = newDeck[i];
    14862:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       70:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    60000:  346:int whoseTurn(struct gameState *state) {
    60000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    40000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    40000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    14932:  533:    for (i = 0; i < state->discardCount[player];i++){
    14862:  534:      state->deck[player][i] = state->discard[player][i];
    14862:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       70:  538:    state->deckCount[player] = state->discardCount[player];
       70:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       70:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       70:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       70:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       70:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       70:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       70:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       70:  563:    state->deckCount[player]--;
       70:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    39930:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    39930:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    39930:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    39930:  576:    state->deckCount[player]--;
    39930:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    40000:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    30000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    30000:  653:  int currentPlayer = whoseTurn(state);
    30000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    30000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    30000:  658:  if (nextPlayer > (state->numPlayers - 1)){
    14985:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
    30000:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:        return adventurerC(state);
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    #####:  671:      for (i = 0; i < 4; i++)
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
    #####:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
    #####:  680:      for (i = 0; i < state->numPlayers; i++)
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
        -:  683:	    {
    #####:  684:	      drawCard(i, state);
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case smithy:
    #####:  811:      return smithyC(state, handPos);
        -:  812:		
        -:  813:    case village:
        -:  814:      //+1 Card
    #####:  815:      drawCard(currentPlayer, state);
        -:  816:			
        -:  817:      //+2 Actions
    #####:  818:      state->numActions = state->numActions + 2;
        -:  819:			
        -:  820:      //discard played card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case baron:
    #####:  825:      state->numBuys++;//Increase buys by 1!
    #####:  826:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  827:	int p = 0;//Iterator for hand!
    #####:  828:	int card_not_discarded = 1;//Flag for discard set!
    #####:  829:	while(card_not_discarded){
    #####:  830:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  831:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  832:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  833:	    state->discardCount[currentPlayer]++;
    #####:  834:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  835:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  836:	    }
    #####:  837:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  838:	    state->handCount[currentPlayer]--;
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
    #####:  841:	  else if (p > state->handCount[currentPlayer]){
        -:  842:	    if(DEBUG) {
        -:  843:	      printf("No estate cards in your hand, invalid choice\n");
        -:  844:	      printf("Must gain an estate if there are any\n");
        -:  845:	    }
    #####:  846:	    if (supplyCount(estate, state) > 0){
    #####:  847:	      gainCard(estate, state, 0, currentPlayer);
    #####:  848:	      state->supplyCount[estate]--;//Decrement estates
    #####:  849:	      if (supplyCount(estate, state) == 0){
    #####:  850:		isGameOver(state);
        -:  851:	      }
        -:  852:	    }
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
        -:  855:			    
        -:  856:	  else{
    #####:  857:	    p++;//Next card
        -:  858:	  }
        -:  859:	}
        -:  860:      }
        -:  861:			    
        -:  862:      else{
    #####:  863:	if (supplyCount(estate, state) > 0){
    #####:  864:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  865:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  866:	  if (supplyCount(estate, state) == 0){
    #####:  867:	    isGameOver(state);
        -:  868:	  }
        -:  869:	}
        -:  870:      }
        -:  871:	    
        -:  872:      
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case great_hall:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
        -:  878:			
        -:  879:      //+1 Actions
    #####:  880:      state->numActions++;
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case minion:
        -:  887:      //+1 action
    #####:  888:      state->numActions++;
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:			
    #####:  893:      if (choice1)		//+2 coins
        -:  894:	{
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:			
    #####:  898:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  899:	{
        -:  900:	  //discard hand
    #####:  901:	  while(numHandCards(state) > 0)
        -:  902:	    {
    #####:  903:	      discardCard(handPos, currentPlayer, state, 0);
        -:  904:	    }
        -:  905:				
        -:  906:	  //draw 4
    #####:  907:	  for (i = 0; i < 4; i++)
        -:  908:	    {
    #####:  909:	      drawCard(currentPlayer, state);
        -:  910:	    }
        -:  911:				
        -:  912:	  //other players discard hand and redraw if hand size > 4
    #####:  913:	  for (i = 0; i < state->numPlayers; i++)
        -:  914:	    {
    #####:  915:	      if (i != currentPlayer)
        -:  916:		{
    #####:  917:		  if ( state->handCount[i] > 4 )
        -:  918:		    {
        -:  919:		      //discard hand
    #####:  920:		      while( state->handCount[i] > 0 )
        -:  921:			{
    #####:  922:			  discardCard(handPos, i, state, 0);
        -:  923:			}
        -:  924:							
        -:  925:		      //draw 4
    #####:  926:		      for (j = 0; j < 4; j++)
        -:  927:			{
    #####:  928:			  drawCard(i, state);
        -:  929:			}
        -:  930:		    }
        -:  931:		}
        -:  932:	    }
        -:  933:				
        -:  934:	}
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case steward:
    30000:  938:      return stewardC(choice1, choice2, choice3, state, handPos);
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
        -:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
        -:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
        -:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
        -:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
        -:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  985:	  state->coins += 2;
        -:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
        -:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
        -:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1015:	    {
    #####: 1016:	      j++;
        -: 1017:	    }
        -: 1018:	}
    #####: 1019:      if (j < choice2)
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1036:	    }
        -: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
        -: 1052:	    }
        -: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
        -: 1080:		}
        -: 1081:					
        -: 1082:	    }
        -: 1083:				
        -: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
    #####: 1093:      return embargoC(choice1, state, handPos);
        -: 1094:		
        -: 1095:    case outpost:
        -: 1096:      //set outpost flag
    #####: 1097:      state->outpostPlayed++;
        -: 1098:			
        -: 1099:      //discard card
    #####: 1100:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1101:      return 0;
        -: 1102:		
        -: 1103:    case salvager:
        -: 1104:      //+1 buy
    #####: 1105:      state->numBuys++;
        -: 1106:			
    #####: 1107:      if (choice1)
        -: 1108:	{
        -: 1109:	  //gain coins equal to trashed card
    #####: 1110:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1111:	  //trash card
    #####: 1112:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1113:	}
        -: 1114:			
        -: 1115:      //discard card
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case sea_hag:
    #####: 1120:      return sea_hagC(state);
        -: 1121:		
        -: 1122:    case treasure_map:
        -: 1123:      //search hand for another treasure_map
    #####: 1124:      index = -1;
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	{
    #####: 1127:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1128:	    {
    #####: 1129:	      index = i;
    #####: 1130:	      break;
        -: 1131:	    }
        -: 1132:	}
    #####: 1133:      if (index > -1)
        -: 1134:	{
        -: 1135:	  //trash both treasure cards
    #####: 1136:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1137:	  discardCard(index, currentPlayer, state, 1);
        -: 1138:
        -: 1139:	  //gain 4 Gold cards
    #####: 1140:	  for (i = 0; i < 4; i++)
        -: 1141:	    {
    #####: 1142:	      gainCard(gold, state, 1, currentPlayer);
        -: 1143:	    }
        -: 1144:				
        -: 1145:	  //return success
    #####: 1146:	  return 1;
        -: 1147:	}
        -: 1148:			
        -: 1149:      //no second treasure_map found in hand
    #####: 1150:      return -1;
        -: 1151:    }
        -: 1152:	
    #####: 1153:  return -1;
        -: 1154:}
        -: 1155:
    90000: 1156:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1157:{
        -: 1158:	
        -: 1159:  //if card is not trashed, added to Played pile 
    90000: 1160:  if (trashFlag < 1)
        -: 1161:    {
        -: 1162:      //add card to played pile
    50000: 1163:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    50000: 1164:      state->playedCardCount++;
        -: 1165:    }
        -: 1166:	
        -: 1167:  //set played card to -1
    90000: 1168:  state->hand[currentPlayer][handPos] = -1;
        -: 1169:	
        -: 1170:  //remove card from player's hand
    90000: 1171:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1172:    {
        -: 1173:      //reduce number of cards in hand
      161: 1174:      state->handCount[currentPlayer]--;
        -: 1175:    }
    89839: 1176:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1177:    {
        -: 1178:      //reduce number of cards in hand
       86: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:  else 	
        -: 1182:    {
        -: 1183:      //replace discarded card with last card in hand
    89753: 1184:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1185:      //set last card to -1
    89753: 1186:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1187:      //reduce number of cards in hand
    89753: 1188:      state->handCount[currentPlayer]--;
        -: 1189:    }
        -: 1190:	
    90000: 1191:  return 0;
        -: 1192:}
        -: 1193:
    #####: 1194:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1195:{
        -: 1196:  //Note: supplyPos is enum of choosen card
        -: 1197:	
        -: 1198:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1199:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1200:    {
    #####: 1201:      return -1;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //added card for [whoseTurn] current player:
        -: 1205:  // toFlag = 0 : add to discard
        -: 1206:  // toFlag = 1 : add to deck
        -: 1207:  // toFlag = 2 : add to hand
        -: 1208:
    #####: 1209:  if (toFlag == 1)
        -: 1210:    {
    #####: 1211:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1212:      state->deckCount[player]++;
        -: 1213:    }
    #####: 1214:  else if (toFlag == 2)
        -: 1215:    {
    #####: 1216:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1217:      state->handCount[player]++;
        -: 1218:    }
        -: 1219:  else
        -: 1220:    {
    #####: 1221:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1222:      state->discardCount[player]++;
        -: 1223:    }
        -: 1224:	
        -: 1225:  //decrease number in supply pile
    #####: 1226:  state->supplyCount[supplyPos]--;
        -: 1227:	 
    #####: 1228:  return 0;
        -: 1229:}
        -: 1230:
    #####: 1231:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1232:{
        -: 1233:  int i;
        -: 1234:	
        -: 1235:  //reset coin count
    #####: 1236:  state->coins = 0;
        -: 1237:
        -: 1238:  //add coins for each Treasure card in player's hand
    #####: 1239:  for (i = 0; i < state->handCount[player]; i++)
        -: 1240:    {
    #####: 1241:      if (state->hand[player][i] == copper)
        -: 1242:	{
    #####: 1243:	  state->coins += 1;
        -: 1244:	}
    #####: 1245:      else if (state->hand[player][i] == silver)
        -: 1246:	{
    #####: 1247:	  state->coins += 2;
        -: 1248:	}
    #####: 1249:      else if (state->hand[player][i] == gold)
        -: 1250:	{
    #####: 1251:	  state->coins += 3;
        -: 1252:	}	
        -: 1253:    }	
        -: 1254:
        -: 1255:  //add bonus
    #####: 1256:  state->coins += bonus;
        -: 1257:
    #####: 1258:  return 0;
        -: 1259:}
        -: 1260:
        -: 1261:////////////////////////////////////////////
        -: 1262://Refactored Card Functions - Assignment 2//
        -: 1263:////////////////////////////////////////////
        -: 1264:
    #####: 1265:int adventurerC(struct gameState *state) {
    #####: 1266:    int z=0;
    #####: 1267:    int currentPlayer = whoseTurn(state);
        -: 1268:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1269:    int drawntreasure=0;
        -: 1270:    int cardDrawn;
        -: 1271:
    #####: 1272:    while(drawntreasure<2){
    #####: 1273:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1274:	    shuffle(currentPlayer, state);
        -: 1275:	    //drawCard(currentPlayer, state); //bug1
        -: 1276:	}
    #####: 1277:	drawCard(currentPlayer, state);   //bug1
    #####: 1278:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1279:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1280:	//if (cardDrawn == copper || cardDrawn == silver) //bug1.2
    #####: 1281:	  drawntreasure++;
        -: 1282:	else{
    #####: 1283:	  temphand[z]=cardDrawn;
    #####: 1284:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1285:	  z++; 
        -: 1286:	}
        -: 1287:      }
    #####: 1288:      while(z-1>=0){
    #####: 1289:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1290:	z=z-1;
        -: 1291:      }
        -: 1292:
    #####: 1293:    return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int smithyC(struct gameState *state, int handPos) {
        -: 1297:    int i;
    #####: 1298:    int currentPlayer = whoseTurn(state);
        -: 1299:
        -: 1300:    //+3 Cards
        -: 1301:    //for (i = 0; i < 3; i++) {
    #####: 1302:    for (i = 0; i <= 3; i++) {   //bug2
    #####: 1303:	  drawCard(currentPlayer, state);
        -: 1304:	}
        -: 1305:			
        -: 1306:    //discard card from hand
    #####: 1307:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1308:    return 0; 
        -: 1309:}
        -: 1310:
    #####: 1311:int sea_hagC(struct gameState *state) {
        -: 1312:    int i;
    #####: 1313:    int currentPlayer = whoseTurn(state);
        -: 1314:
    #####: 1315:    for (i = 0; i < state->numPlayers; i++){
    #####: 1316:	    if (i != currentPlayer){
    #####: 1317:	        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1318:            state->deckCount[i]--;
    #####: 1319:	    state->discardCount[i]++;
    #####: 1320:	    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1321:	    }
        -: 1322:    }
    #####: 1323:    return 0;
        -: 1324:}
        -: 1325:    
    #####: 1326:int embargoC(int choice1, struct gameState *state, int handPos) {
    #####: 1327:    int currentPlayer = whoseTurn(state);
        -: 1328:
        -: 1329:      //+2 Coins
    #####: 1330:      state->coins = state->coins + 2;
        -: 1331:			
        -: 1332:      //see if selected pile is in play
        -: 1333:      //if ( state->supplyCount[choice1] == -1 )
    #####: 1334:      if ( state->supplyCount[choice1] >= -1 )  //bug3
        -: 1335:	{
    #####: 1336:	  return -1;
        -: 1337:	}
        -: 1338:			
        -: 1339:      //add embargo token to selected supply pile
    #####: 1340:      state->embargoTokens[choice1]++;
        -: 1341:			
        -: 1342:      //trash card
    #####: 1343:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1344:      return 0;
        -: 1345:}
        -: 1346:
    30000: 1347:int stewardC(int choice1, int choice2, int choice3, struct gameState *state, int handPos) {
    30000: 1348:    int currentPlayer = whoseTurn(state);
    30000: 1349:      if (choice1 == 1)
        -: 1350:	{
        -: 1351:	  //+2 cards
    10000: 1352:	  drawCard(currentPlayer, state);
    10000: 1353:	  drawCard(currentPlayer, state);
        -: 1354:	}
    20000: 1355:      else if (choice1 == 2)
        -: 1356:      //else if (choice1 != 2)    //bug4
        -: 1357:	{
        -: 1358:	  //+2 coins
    10000: 1359:	  state->coins = state->coins + 2;
        -: 1360:	}
        -: 1361:      else
        -: 1362:	{
        -: 1363:	  //trash 2 cards in hand
    10000: 1364:	  discardCard(choice2, currentPlayer, state, 1);
    10000: 1365:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1366:	}
        -: 1367:			
        -: 1368:      //discard card from hand
    30000: 1369:      discardCard(handPos, currentPlayer, state, 0);
    30000: 1370:      return 0;
        -: 1371:}
        -: 1372:
        -: 1373://end of dominion.c
        -: 1374:
