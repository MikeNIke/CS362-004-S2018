***** RANDOM TEST *****
Function: adventurerCard()
***********************

***** RESULTS *****
PASSED TESTS: 0
FAILED TESTS: 10000

***** FAILURE REPORT *****
shuffle() failed: 0
drawCard() failed: 0
cardEffect() failed: 0
Treasure Count mismatch: 10000
Hand/Deck Count mismatch: 10000
***** FAILED RANDOM TEST *****

****** COVERAGE ******
File 'randomtestadventurer.c'
Lines executed:89.53% of 86
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:6.43% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    10000:  346:int whoseTurn(struct gameState *state) {
    10000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
  2535556:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  2535556:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  2535556:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  2535556:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2535556:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2535556:  576:    state->deckCount[player]--;
  2535556:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  2535556:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************************************************************
        -:  647:# Author: Tanya Haddad, haddadt@oregonstate.edu
        -:  648:# Assignment 2, CS362, April 12th, 2018,
        -:  649:# Description: Implementations for 5 Refactored Dominion cards
        -:  650:# Card effects have intentional bugs added
        -:  651:*************************************************************/
        -:  652:
        -:  653:
    10000:  654:int adventurerEffect(int cPlayer, struct gameState *state){
        -:  655:
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
    10000:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
    10000:  659:  int z = 0;// this is the counter for the temp hand
        -:  660:
  1292778:  661:  while(drawntreasure<3){           /*** added bug ***/
        -:  662:    //if the deck is empty we need to shuffle discard and add to deck
  1272778:  663:    if (state->deckCount[cPlayer] <1){
    #####:  664:      shuffle(cPlayer, state);
        -:  665:    }
  1272778:  666:    drawCard(cPlayer, state);
        -:  667:
        -:  668:    //top card of hand is most recently drawn card.
  1272778:  669:    cardDrawn = state->hand[cPlayer][state->handCount[cPlayer]-1];
        -:  670:
  1272778:  671:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  672:      drawntreasure++;
        -:  673:    else{
  1242778:  674:      temphand[z]=cardDrawn;
        -:  675:      //this should just remove the top card (the most recently drawn one).
  1242778:  676:      state->handCount[cPlayer] = state->handCount[cPlayer] -1; /*** added bug ***/
  1242778:  677:      z++;
        -:  678:    }
        -:  679:  }
  1262778:  680:  while(z-1>=0){
        -:  681:    // discard all cards in play that have been drawn
  1242778:  682:    state->discard[cPlayer][state->discardCount[cPlayer]++]=temphand[z-1];
  1242778:  683:    z=z-1;
        -:  684:  }
    10000:  685:  return 0;
        -:  686:};
        -:  687:
    #####:  688:int smithyEffect(int cPlayer, struct gameState *state, int hPos){
        -:  689:  //+3 Cards
        -:  690:  int i;
    #####:  691:  for (i = 0; i < 2; i++)                  /*** added bug ***/
        -:  692:  {
    #####:  693:    drawCard(cPlayer, state);
        -:  694:  }
        -:  695:
        -:  696:  //discard card from hand
    #####:  697:  discardCard(hPos, cPlayer, state, 0);
    #####:  698:  return 0;
        -:  699:};
        -:  700:
    #####:  701:int villageEffect(int cPlayer, struct gameState *state, int hPos){
        -:  702:  //+1 Card
    #####:  703:  drawCard(cPlayer, state);
        -:  704:
        -:  705:  //+2 Actions
    #####:  706:  state->numActions = state->numActions + 3;           /*** added bug ***/
        -:  707:
        -:  708:  //discard played card from hand
    #####:  709:  discardCard(hPos, cPlayer, state, 0);
    #####:  710:  return 0;
        -:  711:};
        -:  712:
    #####:  713:int mineEffect(int cPlayer, struct gameState *state, int hPos, int choice1, int choice2){
        -:  714:  int j;
    #####:  715:  j = state->hand[cPlayer][choice1];  //store card we will trash
        -:  716:
    #####:  717:  if (state->hand[cPlayer][choice1] < copper || state->hand[cPlayer][choice1] > gold)
        -:  718:  {
    #####:  719:    return -1;
        -:  720:  }
        -:  721:
    #####:  722:  if (choice2 > treasure_map || choice2 < curse)
        -:  723:  {
    #####:  724:    return -1;
        -:  725:  }
        -:  726:
    #####:  727:  if ( (getCost(state->hand[cPlayer][choice1]) + 3) > getCost(choice2) )
        -:  728:  {
    #####:  729:    return -1;
        -:  730:  }
        -:  731:
    #####:  732:  gainCard(choice2, state, 2, cPlayer);
        -:  733:
        -:  734:  //discard card from hand
    #####:  735:  discardCard(hPos, cPlayer, state, 0);
        -:  736:
        -:  737:  //discard trashed card
        -:  738:  int i;
    #####:  739:  for (i = 0; i < state->handCount[cPlayer]; i++)
        -:  740:  {
    #####:  741:    if (state->hand[cPlayer][i] == j)
        -:  742:    {
    #####:  743:      discardCard(i, cPlayer, state, 0);
    #####:  744:      break;
        -:  745:    }
        -:  746:  }
        -:  747:
    #####:  748:  return 0;
        -:  749:};
        -:  750:
    #####:  751:int councilroomEffect(int cPlayer, struct gameState *state, int hPos){
        -:  752:  int i;
        -:  753:  //+4 Cards
    #####:  754:  for (i = 0; i < 5; i++)                /*** added bug ***/
        -:  755:  {
    #####:  756:    drawCard(cPlayer, state);
        -:  757:  }
        -:  758:
        -:  759:  //+1 Buy
    #####:  760:  state->numBuys = state->numBuys +2;   /*** added bug ***/
        -:  761:
        -:  762:  //Each other player draws a card
    #####:  763:  for (i = 0; i < state->numPlayers; i++)
        -:  764:  {
    #####:  765:    if ( i != cPlayer )
        -:  766:    {
    #####:  767:      drawCard(i, state);
        -:  768:    }
        -:  769:  }
        -:  770:
        -:  771:  //put played card in played card pile
    #####:  772:  discardCard(hPos, cPlayer, state, 0);
        -:  773:
    #####:  774:  return 0;
        -:  775:};
        -:  776:
        -:  777:/*************************************************************
        -:  778:# End Assignment 2 definition additions
        -:  779:*************************************************************/
        -:  780:
    10000:  781:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  782:{
        -:  783:  int i;
        -:  784:  int j;
        -:  785:  int k;
        -:  786:  int x;
        -:  787:  int index;
    10000:  788:  int currentPlayer = whoseTurn(state);
    10000:  789:  int nextPlayer = currentPlayer + 1;
        -:  790:
    10000:  791:  int tributeRevealedCards[2] = {-1, -1};
        -:  792:  int temphand[MAX_HAND];// moved above the if statement
    10000:  793:  int drawntreasure=0;
        -:  794:  int cardDrawn;
    10000:  795:  int z = 0;// this is the counter for the temp hand
    10000:  796:  if (nextPlayer > (state->numPlayers - 1)){
     4977:  797:    nextPlayer = 0;
        -:  798:  }
        -:  799:  
        -:  800:	
        -:  801:  //uses switch to select card and perform actions
    10000:  802:  switch( card ) 
        -:  803:    {
        -:  804:/***** Adventurer has been refactored into it's own function */
        -:  805:    case adventurer:
    10000:  806:      return adventurerEffect(currentPlayer, state);
        -:  807:/**************************************************************/
        -:  808:
        -:  809:/***** Council Room has been refactored into it's own function */
        -:  810:    case council_room:
    #####:  811:      councilroomEffect(currentPlayer, state, handPos);
        -:  812:/**************************************************************/
        -:  813:			
        -:  814:    case feast:
        -:  815:      //gain card with cost up to 5
        -:  816:      //Backup hand
    #####:  817:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  818:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  819:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  820:      }
        -:  821:      //Backup hand
        -:  822:
        -:  823:      //Update Coins for Buy
    #####:  824:      updateCoins(currentPlayer, state, 5);
    #####:  825:      x = 1;//Condition to loop on
    #####:  826:      while( x == 1) {//Buy one card
    #####:  827:	if (supplyCount(choice1, state) <= 0){
        -:  828:	  if (DEBUG)
        -:  829:	    printf("None of that card left, sorry!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  833:	  }
        -:  834:	}
    #####:  835:	else if (state->coins < getCost(choice1)){
    #####:  836:	  printf("That card is too expensive!\n");
        -:  837:
        -:  838:	  if (DEBUG){
        -:  839:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  840:	  }
        -:  841:	}
        -:  842:	else{
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
    #####:  848:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  849:	  x = 0;//No more buying cards
        -:  850:
        -:  851:	  if (DEBUG){
        -:  852:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  853:	  }
        -:  854:
        -:  855:	}
        -:  856:      }     
        -:  857:
        -:  858:      //Reset Hand
    #####:  859:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  860:	state->hand[currentPlayer][i] = temphand[i];
    #####:  861:	temphand[i] = -1;
        -:  862:      }
        -:  863:      //Reset Hand
        -:  864:      			
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case gardens:
    #####:  868:      return -1;
        -:  869:
        -:  870:/***** Mine has been refactored into it's own function */
        -:  871:    case mine:
    #####:  872:      mineEffect(currentPlayer, state, handPos, choice1, choice2);
        -:  873:/*********************************************************/
        -:  874:			
        -:  875:    case remodel:
    #####:  876:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  877:
    #####:  878:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      gainCard(choice2, state, 0, currentPlayer);
        -:  884:
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:
        -:  888:      //discard trashed card
    #####:  889:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  890:	{
    #####:  891:	  if (state->hand[currentPlayer][i] == j)
        -:  892:	    {
    #####:  893:	      discardCard(i, currentPlayer, state, 0);			
    #####:  894:	      break;
        -:  895:	    }
        -:  896:	}
        -:  897:
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:/***** Smithy has been refactored into it's own function */
        -:  902:    case smithy:
    #####:  903:      smithyEffect(currentPlayer, state, handPos);
        -:  904:/*********************************************************/
        -:  905:
        -:  906:/***** Village has been refactored into it's own function */
        -:  907:  case village:
    #####:  908:    villageEffect(currentPlayer, state, handPos);
        -:  909:/*********************************************************/
        -:  910:
        -:  911:  case baron:
    #####:  912:    state->numBuys++;//Increase buys by 1!
    #####:  913:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  914:  int p = 0;//Iterator for hand!
    #####:  915:  int card_not_discarded = 1;//Flag for discard set!
    #####:  916:  while(card_not_discarded){
    #####:  917:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  918:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  919:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  920:      state->discardCount[currentPlayer]++;
    #####:  921:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  922:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  923:      }
    #####:  924:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  925:      state->handCount[currentPlayer]--;
    #####:  926:      card_not_discarded = 0;//Exit the loop
        -:  927:    }
    #####:  928:    else if (p > state->handCount[currentPlayer]){
        -:  929:      if(DEBUG) {
        -:  930:        printf("No estate cards in your hand, invalid choice\n");
        -:  931:        printf("Must gain an estate if there are any\n");
        -:  932:      }
    #####:  933:      if (supplyCount(estate, state) > 0){
    #####:  934:        gainCard(estate, state, 0, currentPlayer);
    #####:  935:        state->supplyCount[estate]--;//Decrement estates
    #####:  936:        if (supplyCount(estate, state) == 0){
    #####:  937:      isGameOver(state);
        -:  938:        }
        -:  939:      }
    #####:  940:      card_not_discarded = 0;//Exit the loop
        -:  941:    }
        -:  942:
        -:  943:    else{
    #####:  944:      p++;//Next card
        -:  945:    }
        -:  946:  }
        -:  947:    }
        -:  948:
        -:  949:    else{
    #####:  950:  if (supplyCount(estate, state) > 0){
    #####:  951:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  952:    state->supplyCount[estate]--;//Decrement Estates
    #####:  953:    if (supplyCount(estate, state) == 0){
    #####:  954:      isGameOver(state);
        -:  955:    }
        -:  956:  }
        -:  957:    }
        -:  958:
        -:  959:
    #####:  960:    return 0;
        -:  961:
        -:  962:  case great_hall:
        -:  963:    //+1 Card
    #####:  964:    drawCard(currentPlayer, state);
        -:  965:
        -:  966:    //+1 Actions
    #####:  967:    state->numActions++;
        -:  968:
        -:  969:    //discard card from hand
    #####:  970:    discardCard(handPos, currentPlayer, state, 0);
    #####:  971:    return 0;
        -:  972:
        -:  973:  case minion:
        -:  974:    //+1 action
    #####:  975:    state->numActions++;
        -:  976:
        -:  977:    //discard card from hand
    #####:  978:    discardCard(handPos, currentPlayer, state, 0);
        -:  979:
    #####:  980:    if (choice1)		//+2 coins
        -:  981:  {
    #####:  982:    state->coins = state->coins + 2;
        -:  983:  }
        -:  984:
    #####:  985:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  986:  {
        -:  987:    //discard hand
    #####:  988:    while(numHandCards(state) > 0)
        -:  989:      {
    #####:  990:        discardCard(handPos, currentPlayer, state, 0);
        -:  991:      }
        -:  992:
        -:  993:    //draw 4
    #####:  994:    for (i = 0; i < 4; i++)
        -:  995:      {
    #####:  996:        drawCard(currentPlayer, state);
        -:  997:      }
        -:  998:
        -:  999:    //other players discard hand and redraw if hand size > 4
    #####: 1000:    for (i = 0; i < state->numPlayers; i++)
        -: 1001:      {
    #####: 1002:        if (i != currentPlayer)
        -: 1003:      {
    #####: 1004:        if ( state->handCount[i] > 4 )
        -: 1005:          {
        -: 1006:            //discard hand
    #####: 1007:            while( state->handCount[i] > 0 )
        -: 1008:          {
    #####: 1009:            discardCard(handPos, i, state, 0);
        -: 1010:          }
        -: 1011:
        -: 1012:            //draw 4
    #####: 1013:            for (j = 0; j < 4; j++)
        -: 1014:          {
    #####: 1015:            drawCard(i, state);
        -: 1016:          }
        -: 1017:          }
        -: 1018:      }
        -: 1019:      }
        -: 1020:
        -: 1021:  }
    #####: 1022:    return 0;
        -: 1023:
        -: 1024:  case steward:
    #####: 1025:    if (choice1 == 1)
        -: 1026:  {
        -: 1027:    //+2 cards
    #####: 1028:    drawCard(currentPlayer, state);
    #####: 1029:    drawCard(currentPlayer, state);
        -: 1030:  }
    #####: 1031:    else if (choice1 == 2)
        -: 1032:  {
        -: 1033:    //+2 coins
    #####: 1034:    state->coins = state->coins + 2;
        -: 1035:  }
        -: 1036:    else
        -: 1037:  {
        -: 1038:    //trash 2 cards in hand
    #####: 1039:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1040:    discardCard(choice3, currentPlayer, state, 1);
        -: 1041:  }
        -: 1042:
        -: 1043:    //discard card from hand
    #####: 1044:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1045:    return 0;
        -: 1046:
        -: 1047:  case tribute:
    #####: 1048:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1049:  if (state->deckCount[nextPlayer] > 0){
    #####: 1050:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:    state->deckCount[nextPlayer]--;
        -: 1052:  }
    #####: 1053:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1054:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1055:    state->discardCount[nextPlayer]--;
        -: 1056:  }
        -: 1057:  else{
        -: 1058:    //No Card to Reveal
        -: 1059:    if (DEBUG){
        -: 1060:      printf("No cards to reveal\n");
        -: 1061:    }
        -: 1062:  }
        -: 1063:    }
        -: 1064:
        -: 1065:    else{
    #####: 1066:  if (state->deckCount[nextPlayer] == 0){
    #####: 1067:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1068:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1069:      state->deckCount[nextPlayer]++;
    #####: 1070:      state->discard[nextPlayer][i] = -1;
    #####: 1071:      state->discardCount[nextPlayer]--;
        -: 1072:    }
        -: 1073:
    #####: 1074:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1075:  }
    #####: 1076:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:  state->deckCount[nextPlayer]--;
    #####: 1079:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:  state->deckCount[nextPlayer]--;
        -: 1082:    }
        -: 1083:
    #####: 1084:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1085:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1086:  state->playedCardCount++;
    #####: 1087:  tributeRevealedCards[1] = -1;
        -: 1088:    }
        -: 1089:
    #####: 1090:    for (i = 0; i <= 2; i ++){
    #####: 1091:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1092:    state->coins += 2;
        -: 1093:  }
        -: 1094:
    #####: 1095:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1096:    drawCard(currentPlayer, state);
    #####: 1097:    drawCard(currentPlayer, state);
        -: 1098:  }
        -: 1099:  else{//Action Card
    #####: 1100:    state->numActions = state->numActions + 2;
        -: 1101:  }
        -: 1102:    }
        -: 1103:
    #####: 1104:    return 0;
        -: 1105:
        -: 1106:  case ambassador:
    #####: 1107:    j = 0;		//used to check if player has enough cards to discard
        -: 1108:
    #####: 1109:    if (choice2 > 2 || choice2 < 0)
        -: 1110:  {
    #####: 1111:    return -1;
        -: 1112:  }
        -: 1113:
    #####: 1114:    if (choice1 == handPos)
        -: 1115:  {
    #####: 1116:    return -1;
        -: 1117:  }
        -: 1118:
    #####: 1119:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:  {
    #####: 1121:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1122:      {
    #####: 1123:        j++;
        -: 1124:      }
        -: 1125:  }
    #####: 1126:    if (j < choice2)
        -: 1127:  {
    #####: 1128:    return -1;
        -: 1129:  }
        -: 1130:
        -: 1131:    if (DEBUG)
        -: 1132:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1133:
        -: 1134:    //increase supply count for choosen card by amount being discarded
    #####: 1135:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1136:
        -: 1137:    //each other player gains a copy of revealed card
    #####: 1138:    for (i = 0; i < state->numPlayers; i++)
        -: 1139:  {
    #####: 1140:    if (i != currentPlayer)
        -: 1141:      {
    #####: 1142:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1143:      }
        -: 1144:  }
        -: 1145:
        -: 1146:    //discard played card from hand
    #####: 1147:    discardCard(handPos, currentPlayer, state, 0);
        -: 1148:
        -: 1149:    //trash copies of cards returned to supply
    #####: 1150:    for (j = 0; j < choice2; j++)
        -: 1151:  {
    #####: 1152:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1153:      {
    #####: 1154:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1155:      {
    #####: 1156:        discardCard(i, currentPlayer, state, 1);
    #####: 1157:        break;
        -: 1158:      }
        -: 1159:      }
        -: 1160:  }
        -: 1161:
    #####: 1162:    return 0;
        -: 1163:
        -: 1164:  case cutpurse:
        -: 1165:
    #####: 1166:    updateCoins(currentPlayer, state, 2);
    #####: 1167:    for (i = 0; i < state->numPlayers; i++)
        -: 1168:  {
    #####: 1169:    if (i != currentPlayer)
        -: 1170:      {
    #####: 1171:        for (j = 0; j < state->handCount[i]; j++)
        -: 1172:      {
    #####: 1173:        if (state->hand[i][j] == copper)
        -: 1174:          {
    #####: 1175:            discardCard(j, i, state, 0);
    #####: 1176:            break;
        -: 1177:          }
    #####: 1178:        if (j == state->handCount[i])
        -: 1179:          {
    #####: 1180:            for (k = 0; k < state->handCount[i]; k++)
        -: 1181:          {
        -: 1182:            if (DEBUG)
        -: 1183:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1184:          }
    #####: 1185:            break;
        -: 1186:          }
        -: 1187:      }
        -: 1188:
        -: 1189:      }
        -: 1190:
        -: 1191:  }
        -: 1192:
        -: 1193:    //discard played card from hand
    #####: 1194:    discardCard(handPos, currentPlayer, state, 0);
        -: 1195:
    #####: 1196:    return 0;
        -: 1197:
        -: 1198:
        -: 1199:  case embargo:
        -: 1200:    //+2 Coins
    #####: 1201:    state->coins = state->coins + 2;
        -: 1202:
        -: 1203:    //see if selected pile is in play
    #####: 1204:    if ( state->supplyCount[choice1] == -1 )
        -: 1205:  {
    #####: 1206:    return -1;
        -: 1207:  }
        -: 1208:
        -: 1209:    //add embargo token to selected supply pile
    #####: 1210:    state->embargoTokens[choice1]++;
        -: 1211:
        -: 1212:    //trash card
    #####: 1213:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1214:    return 0;
        -: 1215:
        -: 1216:  case outpost:
        -: 1217:    //set outpost flag
    #####: 1218:    state->outpostPlayed++;
        -: 1219:
        -: 1220:    //discard card
    #####: 1221:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:  case salvager:
        -: 1225:    //+1 buy
    #####: 1226:    state->numBuys++;
        -: 1227:
    #####: 1228:    if (choice1)
        -: 1229:  {
        -: 1230:    //gain coins equal to trashed card
    #####: 1231:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1232:    //trash card
    #####: 1233:    discardCard(choice1, currentPlayer, state, 1);
        -: 1234:  }
        -: 1235:
        -: 1236:    //discard card
    #####: 1237:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1238:    return 0;
        -: 1239:
        -: 1240:  case sea_hag:
    #####: 1241:    for (i = 0; i < state->numPlayers; i++){
    #####: 1242:  if (i != currentPlayer){
    #####: 1243:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1244:    state->discardCount[i]++;
    #####: 1245:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1246:  }
        -: 1247:    }
    #####: 1248:    return 0;
        -: 1249:
        -: 1250:  case treasure_map:
        -: 1251:    //search hand for another treasure_map
    #####: 1252:    index = -1;
    #####: 1253:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1254:  {
    #####: 1255:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1256:      {
    #####: 1257:        index = i;
    #####: 1258:        break;
        -: 1259:      }
        -: 1260:  }
    #####: 1261:    if (index > -1)
        -: 1262:  {
        -: 1263:    //trash both treasure cards
    #####: 1264:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1265:    discardCard(index, currentPlayer, state, 1);
        -: 1266:
        -: 1267:    //gain 4 Gold cards
    #####: 1268:    for (i = 0; i < 4; i++)
        -: 1269:      {
    #####: 1270:        gainCard(gold, state, 1, currentPlayer);
        -: 1271:      }
        -: 1272:
        -: 1273:    //return success
    #####: 1274:    return 1;
        -: 1275:  }
        -: 1276:
        -: 1277:    //no second treasure_map found in hand
    #####: 1278:    return -1;
        -: 1279:  }
        -: 1280:
    #####: 1281:return -1;
        -: 1282:}
        -: 1283:
    #####: 1284:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1285:{
        -: 1286:
        -: 1287://if card is not trashed, added to Played pile
    #####: 1288:if (trashFlag < 1)
        -: 1289:  {
        -: 1290:    //add card to played pile
    #####: 1291:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1292:    state->playedCardCount++;
        -: 1293:  }
        -: 1294:
        -: 1295://set played card to -1
    #####: 1296:state->hand[currentPlayer][handPos] = -1;
        -: 1297:
        -: 1298://remove card from player's hand
    #####: 1299:if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1300:  {
        -: 1301:    //reduce number of cards in hand
    #####: 1302:    state->handCount[currentPlayer]--;
        -: 1303:  }
    #####: 1304:else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1305:  {
        -: 1306:    //reduce number of cards in hand
    #####: 1307:    state->handCount[currentPlayer]--;
        -: 1308:  }
        -: 1309:else
        -: 1310:  {
        -: 1311:    //replace discarded card with last card in hand
    #####: 1312:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1313:    //set last card to -1
    #####: 1314:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1315:    //reduce number of cards in hand
    #####: 1316:    state->handCount[currentPlayer]--;
        -: 1317:  }
        -: 1318:
    #####: 1319:return 0;
        -: 1320:}
        -: 1321:
    #####: 1322:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1323:{
        -: 1324://Note: supplyPos is enum of choosen card
        -: 1325:
        -: 1326://check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1327:if ( supplyCount(supplyPos, state) < 1 )
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
        -: 1332://added card for [whoseTurn] current player:
        -: 1333:// toFlag = 0 : add to discard
        -: 1334:// toFlag = 1 : add to deck
        -: 1335:// toFlag = 2 : add to hand
        -: 1336:
    #####: 1337:if (toFlag == 1)
        -: 1338:  {
    #####: 1339:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1340:    state->deckCount[player]++;
        -: 1341:  }
    #####: 1342:else if (toFlag == 2)
        -: 1343:  {
    #####: 1344:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1345:    state->handCount[player]++;
        -: 1346:  }
        -: 1347:else
        -: 1348:  {
    #####: 1349:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1350:    state->discardCount[player]++;
        -: 1351:  }
        -: 1352:
        -: 1353://decrease number in supply pile
    #####: 1354:state->supplyCount[supplyPos]--;
        -: 1355:
    #####: 1356:return 0;
        -: 1357:}
        -: 1358:
    #####: 1359:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1360:{
        -: 1361:int i;
        -: 1362:
        -: 1363://reset coin count
    #####: 1364:state->coins = 0;
        -: 1365:
        -: 1366://add coins for each Treasure card in player's hand
    #####: 1367:for (i = 0; i < state->handCount[player]; i++)
        -: 1368:  {
    #####: 1369:    if (state->hand[player][i] == copper)
        -: 1370:  {
    #####: 1371:    state->coins += 1;
        -: 1372:  }
    #####: 1373:    else if (state->hand[player][i] == silver)
        -: 1374:  {
    #####: 1375:    state->coins += 2;
        -: 1376:  }
    #####: 1377:    else if (state->hand[player][i] == gold)
        -: 1378:  {
    #####: 1379:    state->coins += 3;
        -: 1380:  }
        -: 1381:  }
        -: 1382:
        -: 1383://add bonus
    #####: 1384:state->coins += bonus;
        -: 1385:
    #####: 1386:return 0;
        -: 1387:}
        -: 1388:
        -: 1389:
        -: 1390://end of dominion.c
        -: 1391:
